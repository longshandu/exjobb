from RunSimDefinitions import RunSimSamsungimport testSeqsimport jobCtrl# configure simulation# lossy RGB# RGB 8bitsimramainrgb = RunSimSamsung(simName              = "ra_rgb_tov",                                   encoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppEncoderStatic",                                   decoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppDecoderStatic",                                   cfgFileMain          = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/cfg/encoder_randomaccess_main_scc.cfg",                                   testSet              = testSeqs.sc_text_over_video,                                   maxNumCodedFrames    = None,                                      # None: do nothing, N: restrict number of coded frames to N                                   temporalSubsampling  = None,                                   # None: do nothing, N: temporally subsample by N before coding                                   qpSet                = [[37], [32], [27], [22]],               # may be overriden by sequence specific configuration                                   allowSeqOverride     = 1,                                   cfgSeqDirOverride    = "cfg_samsung/cfg_seq_randomaccess",                                   qpNum                = -1,                                     # -1: as in qpSet or seq cfg, 0/1/2/3: select one qp out of qpSet or seq cfg                                   decode               = 1,                                   removeEnc            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeRec            = 1,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeDec            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   #jobTypeOverride      = jobCtrl.simpleJob,                                   jobParamsLsfOverride = ['intel', 'sim', False])                 # only for LSF cluster: platform, queue, send results by emailsimldmainrgb = RunSimSamsung(simName              = "ld_rgb_tov",                                   encoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppEncoderStatic",                                   decoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppDecoderStatic",                                   cfgFileMain          = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/cfg/encoder_randomaccess_main_scc.cfg",                                   testSet              = testSeqs.sc_text_over_video,                                   maxNumCodedFrames    = None,                                      # None: do nothing, N: restrict number of coded frames to N                                   temporalSubsampling  = None,                                   # None: do nothing, N: temporally subsample by N before coding                                   qpSet                = [[37], [32], [27], [22]],               # may be overriden by sequence specific configuration                                   allowSeqOverride     = 1,                                   cfgSeqDirOverride    = "cfg_samsung/cfg_seq_lowdelay",                                   qpNum                = -1,                                     # -1: as in qpSet or seq cfg, 0/1/2/3: select one qp out of qpSet or seq cfg                                   decode               = 1,                                   removeEnc            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeRec            = 1,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeDec            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   jobParamsLsfOverride = ['intel', 'sim', False])                 # only for LSF cluster: platform, queue, send results by emailsimimainrgb = RunSimSamsung(simName              = "i_rgb_tov",                                   encoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppEncoderStatic",                                   decoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppDecoderStatic",                                   cfgFileMain          = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/cfg/encoder_randomaccess_main_scc.cfg",                                   testSet              = testSeqs.sc_text_over_video,                                   maxNumCodedFrames    = None,                                      # None: do nothing, N: restrict number of coded frames to N                                   temporalSubsampling  = None,                                   # None: do nothing, N: temporally subsample by N before coding                                   qpSet                = [[37], [32], [27], [22]],               # may be overriden by sequence specific configuration                                   allowSeqOverride     = 1,                                   cfgSeqDirOverride    = "cfg_samsung/cfg_seq_intra",                                   qpNum                = -1,                                     # -1: as in qpSet or seq cfg, 0/1/2/3: select one qp out of qpSet or seq cfg                                   decode               = 1,                                   removeEnc            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeRec            = 1,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeDec            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   jobParamsLsfOverride = ['intel', 'sim', False])                 # only for LSF cluster: platform, queue, send results by email# lossless RGB# RGB  8bitsimramainrgbll = RunSimSamsung(simName              = "ra_ll_rgb",                                   encoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppEncoderStatic",                                   decoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppDecoderStatic",                                   cfgFileMain          = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/cfg/encoder_randomaccess_main_scc.cfg",                                   testSet              = testSeqs.sc_text_over_video,                                   maxNumCodedFrames    = None,                                      # None: do nothing, N: restrict number of coded frames to N                                   temporalSubsampling  = None,                                   # None: do nothing, N: temporally subsample by N before coding                                   qpSet                = [[0]],               # may be overriden by sequence specific configuration                                   allowSeqOverride     = 1,                                   cfgSeqDirOverride    = "cfg_samsung/cfg_seq_randomaccess",                                   qpNum                = -1,                                     # -1: as in qpSet or seq cfg, 0/1/2/3: select one qp out of qpSet or seq cfg                                   decode               = 1,                                   removeEnc            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeRec            = 1,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeDec            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   jobParamsLsfOverride = ['intel', 'sim', False])                 # only for LSF cluster: platform, queue, send results by emailsimldmainrgbll = RunSimSamsung(simName              = "ld_ll_rgb",                                   encoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppEncoderStatic",                                   decoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppDecoderStatic",                                   cfgFileMain          = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/cfg/encoder_randomaccess_main_scc.cfg",                                   testSet              = testSeqs.sc_text_over_video,                                   maxNumCodedFrames    = None,                                      # None: do nothing, N: restrict number of coded frames to N                                   temporalSubsampling  = None,                                   # None: do nothing, N: temporally subsample by N before coding                                   qpSet                = [[0]],               # may be overriden by sequence specific configuration                                   allowSeqOverride     = 1,                                   cfgSeqDirOverride    = "cfg_samsung/cfg_seq_lowdelay",                                   qpNum                = -1,                                     # -1: as in qpSet or seq cfg, 0/1/2/3: select one qp out of qpSet or seq cfg                                   decode               = 1,                                   removeEnc            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeRec            = 1,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeDec            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   jobParamsLsfOverride = ['intel', 'sim', False])                 # only for LSF cluster: platform, queue, send results by emailsimimainrgbll = RunSimSamsung(simName              = "i_ll_rgb",                                   encoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppEncoderStatic",                                   decoderExe           = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/bin/TAppDecoderStatic",                                   cfgFileMain          = "../../source/HM-14.0+RExt-7.0+SCM-1.0-cu-visualization-martin/cfg/encoder_randomaccess_main_scc.cfg",                                   testSet              = testSeqs.sc_text_over_video,                                   maxNumCodedFrames    = None,                                      # None: do nothing, N: restrict number of coded frames to N                                   temporalSubsampling  = None,                                   # None: do nothing, N: temporally subsample by N before coding                                   qpSet                = [[0]],               # may be overriden by sequence specific configuration                                   allowSeqOverride     = 1,                                   cfgSeqDirOverride    = "cfg_samsung/cfg_seq_intra",                                   qpNum                = -1,                                     # -1: as in qpSet or seq cfg, 0/1/2/3: select one qp out of qpSet or seq cfg                                   decode               = 1,                                   removeEnc            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeRec            = 1,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   removeDec            = 0,                                      # 0: keep, 1: use project disk and remove when done, 2: use /tmp                                   jobParamsLsfOverride = ['intel', 'sim', False])                 # only for LSF cluster: platform, queue, send results by email# optionally change config file parameters# NOTE: sequence properties (number of frames, frame sizes etc.)#       as well as file names, qp settings etc. should not be modified here (these will be overwritten in the script)#sim.confMain['SearchMode'] = 1# command parameters can be modified by setting parameters to 'commandOpts'#sim.confMain['commandOpts'] = '-s 64'# start simulations#lossy# rgb sccsimramainrgb.confMain['InputChromaFormat'] = '444'simramainrgb.confMain['InputColourSpaceConvert'] = 'RGBtoGBR'simramainrgb.confMain['OutputColourSpaceConvert'] = 'GBRtoRGB'simramainrgb.confMain['SNRInternalColourSpace'] = 1simramainrgb.confMain['OutputInternalColourSpace'] = 0simramainrgb.confMain['SEIDecodedPictureHash'] = 1simramainrgb.confMain['MSEBasedSequencePSNR'] = 1simramainrgb.confMain['CUVisualization'] = 1simramainrgb.start()simldmainrgb.confMain['InputChromaFormat'] = '444'simldmainrgb.confMain['InputColourSpaceConvert'] = 'RGBtoGBR'simldmainrgb.confMain['OutputColourSpaceConvert'] = 'GBRtoRGB'simldmainrgb.confMain['SNRInternalColourSpace'] = 1simldmainrgb.confMain['OutputInternalColourSpace'] = 0simldmainrgb.confMain['SEIDecodedPictureHash'] = 1simldmainrgb.confMain['MSEBasedSequencePSNR'] = 1simldmainrgb.confMain['CUVisualization'] = 1simldmainrgb.start()simimainrgb.confMain['InputChromaFormat'] = '444'simimainrgb.confMain['InputColourSpaceConvert'] = 'RGBtoGBR'simimainrgb.confMain['OutputColourSpaceConvert'] = 'GBRtoRGB'simimainrgb.confMain['SNRInternalColourSpace'] = 1simimainrgb.confMain['OutputInternalColourSpace'] = 0simimainrgb.confMain['SEIDecodedPictureHash'] = 1simimainrgb.confMain['MSEBasedSequencePSNR'] = 1simimainrgb.confMain['CUVisualization'] = 1simimainrgb.start()# lossless# rgb sccsimramainrgbll.confMain['InputChromaFormat'] = '444'simramainrgbll.confMain['InputColourSpaceConvert'] = 'RGBtoGBR'simramainrgbll.confMain['OutputColourSpaceConvert'] = 'GBRtoRGB'simramainrgbll.confMain['SNRInternalColourSpace'] = 1simramainrgbll.confMain['OutputInternalColourSpace'] = 0simramainrgbll.confMain['SEIDecodedPictureHash'] = 1simramainrgbll.confMain['MSEBasedSequencePSNR'] = 1simramainrgbll.confMain['CostMode'] = 'lossless'simramainrgbll.confMain['IntraReferenceSmoothing'] = 0simramainrgbll.confMain['CUTransquantBypassFlagForce'] = 1simramainrgbll.confMain['TransquantBypassEnableFlag'] = 1simramainrgbll.confMain['CUVisualization'] = 1simramainrgbll.start()simldmainrgbll.confMain['InputChromaFormat'] = '444'simldmainrgbll.confMain['InputColourSpaceConvert'] = 'RGBtoGBR'simldmainrgbll.confMain['OutputColourSpaceConvert'] = 'GBRtoRGB'simldmainrgbll.confMain['SNRInternalColourSpace'] = 1simldmainrgbll.confMain['OutputInternalColourSpace'] = 0simldmainrgbll.confMain['SEIDecodedPictureHash'] = 1simldmainrgbll.confMain['MSEBasedSequencePSNR'] = 1simldmainrgbll.confMain['CostMode'] = 'lossless'simldmainrgbll.confMain['IntraReferenceSmoothing'] = 0simldmainrgbll.confMain['CUTransquantBypassFlagForce'] = 1simldmainrgbll.confMain['TransquantBypassEnableFlag'] = 1simldmainrgbll.confMain['CUVisualization'] = 1simldmainrgbll.start()simimainrgbll.confMain['InputChromaFormat'] = '444'simimainrgbll.confMain['InputColourSpaceConvert'] = 'RGBtoGBR'simimainrgbll.confMain['OutputColourSpaceConvert'] = 'GBRtoRGB'simimainrgbll.confMain['SNRInternalColourSpace'] = 1simimainrgbll.confMain['OutputInternalColourSpace'] = 0simimainrgbll.confMain['SEIDecodedPictureHash'] = 1simimainrgbll.confMain['MSEBasedSequencePSNR'] = 1simimainrgbll.confMain['CostMode'] = 'lossless'simimainrgbll.confMain['IntraReferenceSmoothing'] = 0simimainrgbll.confMain['CUTransquantBypassFlagForce'] = 1simimainrgbll.confMain['TransquantBypassEnableFlag'] = 1simimainrgbll.confMain['CUVisualization'] = 1simimainrgbll.start()